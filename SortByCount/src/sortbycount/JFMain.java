/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sortbycount;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Sely
 */
public class JFMain extends javax.swing.JFrame {

    /**
     * Creates new form JFMain
     */
    File fileInput;
    File folderOutput;
    ArrayList<ValueAndCount> bufferedValues = new ArrayList();

    public JFMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBConvert = new javax.swing.JButton();
        jTFOutputFile = new javax.swing.JTextField();
        jTFBrowseFile = new javax.swing.JTextField();
        jBBrowse = new javax.swing.JButton();
        jBBrowseOutputFolder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sort By Count");

        jBConvert.setText("Convert");
        jBConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBConvertActionPerformed(evt);
            }
        });

        jTFBrowseFile.setDragEnabled(true);
        jTFBrowseFile.setDropMode(javax.swing.DropMode.INSERT);
        jTFBrowseFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTFBrowseFileMouseReleased(evt);
            }
        });

        jBBrowse.setText("Browse File");
        jBBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBrowseActionPerformed(evt);
            }
        });

        jBBrowseOutputFolder.setText("Browse Output Folder");
        jBBrowseOutputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBrowseOutputFolderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTFBrowseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTFOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBBrowseOutputFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBConvert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFBrowseFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBBrowseOutputFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBConvert, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(275, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public File getFileInput() {
        return fileInput;
    }

    public void setFileInput(File fileInput) {
        this.fileInput = fileInput;
    }

    public File getFolderEXE() {
        return folderOutput;
    }

    public void setFolderEXE(File folderEXE) {
        this.folderOutput = folderEXE;
    }

    public void countAndSort() {
        if (!jTFBrowseFile.getText().trim().equals("") && !jTFOutputFile.getText().trim().equals("")) {
             
                if (fileInput.getName().toLowerCase().endsWith(".txt")) {
                    try {
                        BufferedReader source = new BufferedReader(new FileReader(fileInput));
                        String readLine="";
                        
                        while((readLine=source.readLine())!= null){
                            int inputValue=Integer.parseInt(readLine);
                            if(!isValueExistCountIncrement(inputValue)){
                                ValueAndCount vc = new ValueAndCount();
                                vc.value=inputValue;
                                vc.count=1;
                                bufferedValues.add(vc);
                            }                                                        
                        }
                        source.close();
                        
                        for(int i=0;i<bufferedValues.size()-1;i++){
                            for(int j=i+1;j<bufferedValues.size();j++){
                                if(bufferedValues.get(i).count<bufferedValues.get(j).count){
                                    ValueAndCount temp;
                                    temp=bufferedValues.get(i);
                                    bufferedValues.set(i, bufferedValues.get(j));
                                    bufferedValues.set(j, temp);
                                }
                            }   
                        }
                        
                        BufferedWriter destin = new BufferedWriter(new FileWriter(folderOutput+"\\Output.txt"));
                        for(ValueAndCount vc:bufferedValues){
                            String writeLine=vc.value+" "+vc.count;
                            destin.write(writeLine, 0, writeLine.length());
                            destin.newLine();
                        }
                        destin.close();                        
                        JOptionPane.showConfirmDialog(this, "Please check the output folder for 'output.txt' !", "Sort By Count", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
         
                    } catch (IOException | NumberFormatException e) {
                        System.out.println();
                    }
                } else {
                    JOptionPane.showConfirmDialog(this, fileInput.getAbsoluteFile() + " is not a valid '.txt' file !", "Sort By Count", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                }
        } else {
            JOptionPane.showConfirmDialog(this, "Please Enter required Datas !", "Sort By Count", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private boolean isValueExistCountIncrement(int inputValue){
        for(ValueAndCount vc:bufferedValues){
            if(vc.value==inputValue){
                vc.count++;
                return true;
            }
        }
        return false;
    }

    private void jBConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBConvertActionPerformed
        countAndSort();
    }//GEN-LAST:event_jBConvertActionPerformed

    private void jBBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBrowseActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == jBBrowse) {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

            int returnVal = jfc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                fileInput = jfc.getSelectedFile();
                jTFBrowseFile.setText(fileInput.getAbsolutePath());
                folderOutput = jfc.getCurrentDirectory();
                jTFOutputFile.setText(folderOutput.getAbsolutePath());

            } else {
                fileInput = null;
            }
        }
    }//GEN-LAST:event_jBBrowseActionPerformed

    private void jBBrowseOutputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBrowseOutputFolderActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == jBBrowseOutputFolder) {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int returnVal = jfc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                folderOutput = jfc.getSelectedFile();

                jTFOutputFile.setText(folderOutput.getAbsolutePath());

            } else {
                folderOutput = null;
            }
        }
    }//GEN-LAST:event_jBBrowseOutputFolderActionPerformed

    private void jTFBrowseFileMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFBrowseFileMouseReleased
        // TODO add your handling code here:
        if (evt.getSource() == jTFBrowseFile) {
        }
    }//GEN-LAST:event_jTFBrowseFileMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                final JFMain jf = new JFMain();
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                jf.setLocation(dim.width / 2 - jf.getSize().width / 2, dim.height / 2 - jf.getSize().height / 2);
                jf.setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBrowse;
    private javax.swing.JButton jBBrowseOutputFolder;
    private javax.swing.JButton jBConvert;
    private javax.swing.JTextField jTFBrowseFile;
    private javax.swing.JTextField jTFOutputFile;
    // End of variables declaration//GEN-END:variables
}
